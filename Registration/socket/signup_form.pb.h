// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signup_form.proto

#ifndef PROTOBUF_signup_5fform_2eproto__INCLUDED
#define PROTOBUF_signup_5fform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_signup_5fform_2eproto();
void protobuf_AssignDesc_signup_5fform_2eproto();
void protobuf_ShutdownFile_signup_5fform_2eproto();

class SignupRequest;
class SignupRequest_FormEntry;
class SignupResponse;
class ListRequest;
class ListResponse;
class FormRequest;
class FormResponse;
class FormResponse_FormElement;

enum FormResponse_FormElementType {
  FormResponse_FormElementType_CHECK = 0,
  FormResponse_FormElementType_RADIO = 1,
  FormResponse_FormElementType_SELECT = 2,
  FormResponse_FormElementType_TEXT = 3
};
bool FormResponse_FormElementType_IsValid(int value);
const FormResponse_FormElementType FormResponse_FormElementType_FormElementType_MIN = FormResponse_FormElementType_CHECK;
const FormResponse_FormElementType FormResponse_FormElementType_FormElementType_MAX = FormResponse_FormElementType_TEXT;
const int FormResponse_FormElementType_FormElementType_ARRAYSIZE = FormResponse_FormElementType_FormElementType_MAX + 1;

// ===================================================================

class SignupRequest_FormEntry : public ::google::protobuf::MessageLite {
 public:
  SignupRequest_FormEntry();
  virtual ~SignupRequest_FormEntry();
  
  SignupRequest_FormEntry(const SignupRequest_FormEntry& from);
  
  inline SignupRequest_FormEntry& operator=(const SignupRequest_FormEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SignupRequest_FormEntry& default_instance();
  
  void Swap(SignupRequest_FormEntry* other);
  
  // implements Message ----------------------------------------------
  
  SignupRequest_FormEntry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SignupRequest_FormEntry& from);
  void MergeFrom(const SignupRequest_FormEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated string value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const char* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();
  
  // @@protoc_insertion_point(class_scope:SignupRequest.FormEntry)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static SignupRequest_FormEntry* default_instance_;
};
// -------------------------------------------------------------------

class SignupRequest : public ::google::protobuf::MessageLite {
 public:
  SignupRequest();
  virtual ~SignupRequest();
  
  SignupRequest(const SignupRequest& from);
  
  inline SignupRequest& operator=(const SignupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SignupRequest& default_instance();
  
  void Swap(SignupRequest* other);
  
  // implements Message ----------------------------------------------
  
  SignupRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SignupRequest& from);
  void MergeFrom(const SignupRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef SignupRequest_FormEntry FormEntry;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .SignupRequest.FormEntry entry = 2;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline const ::SignupRequest_FormEntry& entry(int index) const;
  inline ::SignupRequest_FormEntry* mutable_entry(int index);
  inline ::SignupRequest_FormEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::SignupRequest_FormEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::SignupRequest_FormEntry >*
      mutable_entry();
  
  // @@protoc_insertion_point(class_scope:SignupRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::SignupRequest_FormEntry > entry_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static SignupRequest* default_instance_;
};
// -------------------------------------------------------------------

class SignupResponse : public ::google::protobuf::MessageLite {
 public:
  SignupResponse();
  virtual ~SignupResponse();
  
  SignupResponse(const SignupResponse& from);
  
  inline SignupResponse& operator=(const SignupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SignupResponse& default_instance();
  
  void Swap(SignupResponse* other);
  
  // implements Message ----------------------------------------------
  
  SignupResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SignupResponse& from);
  void MergeFrom(const SignupResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string response = 1;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const char* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  
  // @@protoc_insertion_point(class_scope:SignupResponse)
 private:
  inline void set_has_response();
  inline void clear_has_response();
  
  ::std::string* response_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static SignupResponse* default_instance_;
};
// -------------------------------------------------------------------

class ListRequest : public ::google::protobuf::MessageLite {
 public:
  ListRequest();
  virtual ~ListRequest();
  
  ListRequest(const ListRequest& from);
  
  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ListRequest& default_instance();
  
  void Swap(ListRequest* other);
  
  // implements Message ----------------------------------------------
  
  ListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // @@protoc_insertion_point(class_scope:ListRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  
  ::std::string* username_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static ListRequest* default_instance_;
};
// -------------------------------------------------------------------

class ListResponse : public ::google::protobuf::MessageLite {
 public:
  ListResponse();
  virtual ~ListResponse();
  
  ListResponse(const ListResponse& from);
  
  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ListResponse& default_instance();
  
  void Swap(ListResponse* other);
  
  // implements Message ----------------------------------------------
  
  ListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:ListResponse)
 private:
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static ListResponse* default_instance_;
};
// -------------------------------------------------------------------

class FormRequest : public ::google::protobuf::MessageLite {
 public:
  FormRequest();
  virtual ~FormRequest();
  
  FormRequest(const FormRequest& from);
  
  inline FormRequest& operator=(const FormRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FormRequest& default_instance();
  
  void Swap(FormRequest* other);
  
  // implements Message ----------------------------------------------
  
  FormRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FormRequest& from);
  void MergeFrom(const FormRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:FormRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static FormRequest* default_instance_;
};
// -------------------------------------------------------------------

class FormResponse_FormElement : public ::google::protobuf::MessageLite {
 public:
  FormResponse_FormElement();
  virtual ~FormResponse_FormElement();
  
  FormResponse_FormElement(const FormResponse_FormElement& from);
  
  inline FormResponse_FormElement& operator=(const FormResponse_FormElement& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FormResponse_FormElement& default_instance();
  
  void Swap(FormResponse_FormElement* other);
  
  // implements Message ----------------------------------------------
  
  FormResponse_FormElement* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FormResponse_FormElement& from);
  void MergeFrom(const FormResponse_FormElement& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string options = 1;
  inline int options_size() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 1;
  inline const ::std::string& options(int index) const;
  inline ::std::string* mutable_options(int index);
  inline void set_options(int index, const ::std::string& value);
  inline void set_options(int index, const char* value);
  inline void set_options(int index, const char* value, size_t size);
  inline ::std::string* add_options();
  inline void add_options(const ::std::string& value);
  inline void add_options(const char* value);
  inline void add_options(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& options() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_options();
  
  // required .FormResponse.FormElementType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::FormResponse_FormElementType type() const;
  inline void set_type(::FormResponse_FormElementType value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:FormResponse.FormElement)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::RepeatedPtrField< ::std::string> options_;
  ::std::string* name_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static FormResponse_FormElement* default_instance_;
};
// -------------------------------------------------------------------

class FormResponse : public ::google::protobuf::MessageLite {
 public:
  FormResponse();
  virtual ~FormResponse();
  
  FormResponse(const FormResponse& from);
  
  inline FormResponse& operator=(const FormResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FormResponse& default_instance();
  
  void Swap(FormResponse* other);
  
  // implements Message ----------------------------------------------
  
  FormResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FormResponse& from);
  void MergeFrom(const FormResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef FormResponse_FormElement FormElement;
  
  typedef FormResponse_FormElementType FormElementType;
  static const FormElementType CHECK = FormResponse_FormElementType_CHECK;
  static const FormElementType RADIO = FormResponse_FormElementType_RADIO;
  static const FormElementType SELECT = FormResponse_FormElementType_SELECT;
  static const FormElementType TEXT = FormResponse_FormElementType_TEXT;
  static inline bool FormElementType_IsValid(int value) {
    return FormResponse_FormElementType_IsValid(value);
  }
  static const FormElementType FormElementType_MIN =
    FormResponse_FormElementType_FormElementType_MIN;
  static const FormElementType FormElementType_MAX =
    FormResponse_FormElementType_FormElementType_MAX;
  static const int FormElementType_ARRAYSIZE =
    FormResponse_FormElementType_FormElementType_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // repeated .FormResponse.FormElement element = 3;
  inline int element_size() const;
  inline void clear_element();
  static const int kElementFieldNumber = 3;
  inline const ::FormResponse_FormElement& element(int index) const;
  inline ::FormResponse_FormElement* mutable_element(int index);
  inline ::FormResponse_FormElement* add_element();
  inline const ::google::protobuf::RepeatedPtrField< ::FormResponse_FormElement >&
      element() const;
  inline ::google::protobuf::RepeatedPtrField< ::FormResponse_FormElement >*
      mutable_element();
  
  // @@protoc_insertion_point(class_scope:FormResponse)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::FormResponse_FormElement > element_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_signup_5fform_2eproto();
  friend void protobuf_AssignDesc_signup_5fform_2eproto();
  friend void protobuf_ShutdownFile_signup_5fform_2eproto();
  
  void InitAsDefaultInstance();
  static FormResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SignupRequest_FormEntry

// required string name = 1;
inline bool SignupRequest_FormEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignupRequest_FormEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignupRequest_FormEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignupRequest_FormEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SignupRequest_FormEntry::name() const {
  return *name_;
}
inline void SignupRequest_FormEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SignupRequest_FormEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SignupRequest_FormEntry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignupRequest_FormEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SignupRequest_FormEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string value = 2;
inline int SignupRequest_FormEntry::value_size() const {
  return value_.size();
}
inline void SignupRequest_FormEntry::clear_value() {
  value_.Clear();
}
inline const ::std::string& SignupRequest_FormEntry::value(int index) const {
  return value_.Get(index);
}
inline ::std::string* SignupRequest_FormEntry::mutable_value(int index) {
  return value_.Mutable(index);
}
inline void SignupRequest_FormEntry::set_value(int index, const ::std::string& value) {
  value_.Mutable(index)->assign(value);
}
inline void SignupRequest_FormEntry::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
}
inline void SignupRequest_FormEntry::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignupRequest_FormEntry::add_value() {
  return value_.Add();
}
inline void SignupRequest_FormEntry::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
}
inline void SignupRequest_FormEntry::add_value(const char* value) {
  value_.Add()->assign(value);
}
inline void SignupRequest_FormEntry::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SignupRequest_FormEntry::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SignupRequest_FormEntry::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// SignupRequest

// required string name = 1;
inline bool SignupRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignupRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignupRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignupRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SignupRequest::name() const {
  return *name_;
}
inline void SignupRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SignupRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SignupRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignupRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SignupRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .SignupRequest.FormEntry entry = 2;
inline int SignupRequest::entry_size() const {
  return entry_.size();
}
inline void SignupRequest::clear_entry() {
  entry_.Clear();
}
inline const ::SignupRequest_FormEntry& SignupRequest::entry(int index) const {
  return entry_.Get(index);
}
inline ::SignupRequest_FormEntry* SignupRequest::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::SignupRequest_FormEntry* SignupRequest::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SignupRequest_FormEntry >&
SignupRequest::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::SignupRequest_FormEntry >*
SignupRequest::mutable_entry() {
  return &entry_;
}

// -------------------------------------------------------------------

// SignupResponse

// required string response = 1;
inline bool SignupResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignupResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignupResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignupResponse::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& SignupResponse::response() const {
  return *response_;
}
inline void SignupResponse::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void SignupResponse::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void SignupResponse::set_response(const char* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignupResponse::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* SignupResponse::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ListRequest

// required string username = 1;
inline bool ListRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ListRequest::username() const {
  return *username_;
}
inline void ListRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ListRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ListRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* ListRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ListResponse

// repeated uint32 id = 1;
inline int ListResponse::id_size() const {
  return id_.size();
}
inline void ListResponse::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 ListResponse::id(int index) const {
  return id_.Get(index);
}
inline void ListResponse::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void ListResponse::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ListResponse::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ListResponse::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// FormRequest

// required uint32 id = 1;
inline bool FormRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FormRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FormRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FormRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FormRequest::id() const {
  return id_;
}
inline void FormRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FormResponse_FormElement

// repeated string options = 1;
inline int FormResponse_FormElement::options_size() const {
  return options_.size();
}
inline void FormResponse_FormElement::clear_options() {
  options_.Clear();
}
inline const ::std::string& FormResponse_FormElement::options(int index) const {
  return options_.Get(index);
}
inline ::std::string* FormResponse_FormElement::mutable_options(int index) {
  return options_.Mutable(index);
}
inline void FormResponse_FormElement::set_options(int index, const ::std::string& value) {
  options_.Mutable(index)->assign(value);
}
inline void FormResponse_FormElement::set_options(int index, const char* value) {
  options_.Mutable(index)->assign(value);
}
inline void FormResponse_FormElement::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FormResponse_FormElement::add_options() {
  return options_.Add();
}
inline void FormResponse_FormElement::add_options(const ::std::string& value) {
  options_.Add()->assign(value);
}
inline void FormResponse_FormElement::add_options(const char* value) {
  options_.Add()->assign(value);
}
inline void FormResponse_FormElement::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FormResponse_FormElement::options() const {
  return options_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FormResponse_FormElement::mutable_options() {
  return &options_;
}

// required .FormResponse.FormElementType type = 2;
inline bool FormResponse_FormElement::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FormResponse_FormElement::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FormResponse_FormElement::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FormResponse_FormElement::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::FormResponse_FormElementType FormResponse_FormElement::type() const {
  return static_cast< ::FormResponse_FormElementType >(type_);
}
inline void FormResponse_FormElement::set_type(::FormResponse_FormElementType value) {
  GOOGLE_DCHECK(::FormResponse_FormElementType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string name = 3;
inline bool FormResponse_FormElement::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FormResponse_FormElement::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FormResponse_FormElement::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FormResponse_FormElement::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FormResponse_FormElement::name() const {
  return *name_;
}
inline void FormResponse_FormElement::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FormResponse_FormElement::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FormResponse_FormElement::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FormResponse_FormElement::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FormResponse_FormElement::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FormResponse

// required string name = 1;
inline bool FormResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FormResponse::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FormResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FormResponse::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FormResponse::name() const {
  return *name_;
}
inline void FormResponse::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FormResponse::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FormResponse::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FormResponse::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FormResponse::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 id = 2;
inline bool FormResponse::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FormResponse::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FormResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FormResponse::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FormResponse::id() const {
  return id_;
}
inline void FormResponse::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .FormResponse.FormElement element = 3;
inline int FormResponse::element_size() const {
  return element_.size();
}
inline void FormResponse::clear_element() {
  element_.Clear();
}
inline const ::FormResponse_FormElement& FormResponse::element(int index) const {
  return element_.Get(index);
}
inline ::FormResponse_FormElement* FormResponse::mutable_element(int index) {
  return element_.Mutable(index);
}
inline ::FormResponse_FormElement* FormResponse::add_element() {
  return element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FormResponse_FormElement >&
FormResponse::element() const {
  return element_;
}
inline ::google::protobuf::RepeatedPtrField< ::FormResponse_FormElement >*
FormResponse::mutable_element() {
  return &element_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_signup_5fform_2eproto__INCLUDED
